indeed$Date
indeed <- read.csv2("2015-12-17-JobSearch-Indeed.csv")
indeed$Company <- str_trim(str_replace_all(indeed$Company, "\n", ""))
indeed$firstCity <- str_split_fixed(indeed$City, ",", 2)[,1]
indeed$firstCity <- str_split_fixed(indeed$firstCity, " ", 2)[,1]
############ DATE
indeed$Date_str <- ifelse(grepl("Tage", indeed$Date), indeed$Date, 0)
indeed$Date_str <- str_replace_all(indeed$Date_str, "Veröffentlicht:", "")
indeed$Date_str <- str_trim(str_replace_all(indeed$Date_str, "\n", ""))
indeed$Date_str <- str_split_fixed(indeed$Date_str, " ", 3)[,2]
indeed$Date_str <- str_replace_all(indeed$Date_str, "\\+", "")
indeed$Date_str = as.Date(as.Date("2015-12-17")-as.numeric(indeed$Date_str))
indeed$date <- as.Date(indeed$Date, "%d.%m.%y")
indeed$date
indeed$date <- ifelse(is.na(indeed$Date), as.Date(indeed$Date_str), as.Date(indeed$Date))
indeed$date
as.Date(indeed$Date_str)
indeed$date <- ifelse(is.na(indeed$Date), indeed$Date_str, as.Date(indeed$Date))
indeed$date
str(indeed)
indeed[is.na(indeed$Date),]$date <- indeed$Date_str
indeed[is.na(indeed$Date),]$date <- indeed[is.na(indeed$Date),]$Date_str
str(indeed)
indeed$Date
View(indeed)
indeed <- read.csv2("2015-12-17-JobSearch-Indeed.csv")
indeed$Company <- str_trim(str_replace_all(indeed$Company, "\n", ""))
indeed$firstCity <- str_split_fixed(indeed$City, ",", 2)[,1]
indeed$firstCity <- str_split_fixed(indeed$firstCity, " ", 2)[,1]
############ DATE
indeed$Date_str <- ifelse(grepl("Tage", indeed$Date), indeed$Date, 0)
indeed$Date_str <- str_replace_all(indeed$Date_str, "Veröffentlicht:", "")
indeed$Date_str <- str_trim(str_replace_all(indeed$Date_str, "\n", ""))
indeed$Date_str <- str_split_fixed(indeed$Date_str, " ", 3)[,2]
indeed$Date_str <- str_replace_all(indeed$Date_str, "\\+", "")
indeed$Date_str = as.Date(as.Date("2015-12-17")-as.numeric(indeed$Date_str))
indeed$Date_str
indeed$date <- as.Date(indeed$Date, "%d.%m.%y")
indeed[is.na(indeed$Date),]$date <- indeed[is.na(indeed$Date),]$Date_str
str(indeed)
View(indeed)
indeed[is.na(indeed$Date),]$date <- as.Date(indeed[is.na(indeed$Date),]$Date_str)
indeed[is.na(indeed$date),]$date <- as.Date(indeed[is.na(indeed$date),]$Date_str)
indeed$date
indeed[is.na(indeed$date),]$date <- indeed[is.na(indeed$date),]$ScrapeDate
View(indeed)
indeed <- indeed[, c("date", "Company", "City")]
indeed
stepstone <- read.csv2("2015-12-17-JobSearch-Stepstone.csv")
View(stepstone)
stepstone
stepstone$Date <- str_replace_all(stepstone$Date, "Veröffentlicht:", "")
stepstone$Date
stepstone$Date <- str_trim(str_replace_all(stepstone$Date, "\n", ""))
stepstone$Date <- str_split_fixed(stepstone$Date, " ", 3)[,2]
stepstone$Date
stepstone$date = as.Date(as.Date("2015-12-17")-as.numeric(stepstone$Date))
ifelse(is.na(stepstone$date), as.Date("2015-12-17"), stepstone$date)
as.Date(ifelse(is.na(stepstone$date), as.Date("2015-12-17"), stepstone$date))
stepstone[is.na(stepstone$date)]$date <- as.Date("2015-12-17")
stepstone[is.na(stepstone$date),]$date <- as.Date("2015-12-17")
stepstone$date
stepstone
stepstone$firstCity <- str_split_fixed(stepstone$City, ",", 2)[,1]
stepstone$firstCity <- str_split_fixed(stepstone$firstCity, " ", 2)[,1]
stepstone <- stepstone[, c("date", "Company", "firstCity")]
monster <- read.csv2("2015-12-17-JobSearch-Monster.csv")
View(monster)
monster$Date <- str_replace_all(monster$Date, "Veröffentlicht:", "")
monster$Date <- str_trim(str_replace_all(monster$Date, "\n", ""))
monster$Date <- str_split_fixed(monster$Date, " ", 3)[,2]
monster$date = as.Date(as.Date("2015-12-17")-as.numeric(monster$Date))
monster[is.na(monster$date),]$date <- as.Date("2015-12-17")
monster$date
View(monster)
monster$firstCity <- str_split_fixed(monster$City, ",", 2)[,1]
monster$firstCity <- str_split_fixed(monster$firstCity, " ", 2)[,1]
monster$Company <- str_trim(str_replace_all(monster$Company, "\n", ""))
monster <- monster[, c("date", "Company", "firstCity")]
monster$Platform <- "Monster"
indeeed$Platform <- "Indeed"
stepstone$Platform <- "Stepstone"
indeed$Platform <- "Indeed"
all <- rbind(monster, indeed)
all <- rbind(all, stepstone)
stepstone
all <- rbind(all, stepstone)
df(stepstone)
View(stepstone)
str(stepstone)
indeed <- read.csv2("2015-12-17-JobSearch-Indeed.csv")
indeed$Company <- str_trim(str_replace_all(indeed$Company, "\n", ""))
indeed$firstCity <- str_split_fixed(indeed$City, ",", 2)[,1]
indeed$firstCity <- str_split_fixed(indeed$firstCity, " ", 2)[,1]
############ DATE
indeed$Date_str <- ifelse(grepl("Tage", indeed$Date), indeed$Date, 0)
indeed$Date_str <- str_replace_all(indeed$Date_str, "Veröffentlicht:", "")
indeed$Date_str <- str_trim(str_replace_all(indeed$Date_str, "\n", ""))
indeed$Date_str <- str_split_fixed(indeed$Date_str, " ", 3)[,2]
indeed$Date_str <- str_replace_all(indeed$Date_str, "\\+", "")
indeed$Date_str = as.Date(as.Date("2015-12-17")-as.numeric(indeed$Date_str))
indeed$date <- as.Date(indeed$Date, "%d.%m.%y")
indeed[is.na(indeed$date),]$date <- as.Date(indeed[is.na(indeed$date),]$Date_str)
indeed[is.na(indeed$date),]$date <- indeed[is.na(indeed$date),]$ScrapeDate
###############################################################
indeed <- indeed[, c("date", "Company", "firstCity")]
#############################################################
stepstone <- read.csv2("2015-12-17-JobSearch-Stepstone.csv")
stepstone$Date <- str_replace_all(stepstone$Date, "Veröffentlicht:", "")
stepstone$Date <- str_trim(str_replace_all(stepstone$Date, "\n", ""))
stepstone$Date <- str_split_fixed(stepstone$Date, " ", 3)[,2]
stepstone$date = as.Date(as.Date("2015-12-17")-as.numeric(stepstone$Date))
stepstone[is.na(stepstone$date),]$date <- as.Date("2015-12-17")
stepstone$firstCity <- str_split_fixed(stepstone$City, ",", 2)[,1]
stepstone$firstCity <- str_split_fixed(stepstone$firstCity, " ", 2)[,1]
stepstone$Company <- str_trim(str_replace_all(stepstone$Company, "\n", ""))
stepstone <- stepstone[, c("date", "Company", "firstCity")]
#############################################################
monster <- read.csv2("2015-12-17-JobSearch-Monster.csv")
monster$Date <- str_replace_all(monster$Date, "Veröffentlicht:", "")
monster$Date <- str_trim(str_replace_all(monster$Date, "\n", ""))
monster$Date <- str_split_fixed(monster$Date, " ", 3)[,2]
monster$date = as.Date(as.Date("2015-12-17")-as.numeric(monster$Date))
monster[is.na(monster$date),]$date <- as.Date("2015-12-17")
monster$firstCity <- str_split_fixed(monster$City, ",", 2)[,1]
monster$firstCity <- str_split_fixed(monster$firstCity, " ", 2)[,1]
monster$Company <- str_trim(str_replace_all(monster$Company, "\n", ""))
monster <- monster[, c("date", "Company", "firstCity")]
###################################################################################
monster$Platform <- "Monster"
indeed$Platform <- "Indeed"
stepstone$Platform <- "Stepstone"
all <- rbind(monster, indeed)
all <- rbind(all, stepstone)
write.csv(all, "all.csv")
str(all)
ddply(all, .(Company), summarise, N=length(.id.))
ddply(all, .(Company), summarise, N=length(firstCity))
ddply(all, .(firstCity), summarise, N=length(firstCity))
View(all)
ddply(all, .(date), summarise, N=length(firstCity))
all$weekday <- day(all$date)
all$weekday
all$weekday <- weekdays(all$date)
all$weekday
all$weekday <- weekdays(all$date, abbreviate = T)
ddply(all, .(weekday), summarise, N=length(firstCity))
View(all)
ddply(all, .(Company, Plattform), summarise, N=length(firstCity))
ddply(all, .(Company, Platform), summarise, N=length(firstCity))
ddply(all, .(Platform, Company), summarise, N=length(firstCity))
ddply(all, .(Platform), summarise, N=length(firstCity))
ddply(all, .(Company), summarise, N=length(Company))
ddply(all, .(Platform), summarise, N=length(Platform))
ddply(all, .(Platform, Company), summarise, N=length(firstCity))
ddply(all, .(Platform), summarise, N=length(Platform))
ddply(all, .(Platform, firstCity), summarise, N=length(firstCity))
ggplot2(all, .aes(.count.)) +geom_histogram()
require(ggplot2)
require(ggthemes)
ggplot2(all, .aes(.count.)) +geom_histogram()
ggplot(all, .aes(.count.)) +geom_histogram()
ggplot(all, aes(.count.)) +geom_histogram()
ggplot(all, aes(firstCity)) +geom_histogram()
ggplot(all, aes(weekday)) +geom_histogram()
ggplot(all, aes(Company)) +geom_histogram()
dd <- ddply(all, .(firstCity), summarise, N=length(firstCity))
ggplot(all, aes(firstCity, N)) +geom_bar(stat="identity")
dd <- ddply(all, .(firstCity), summarise, N=length(firstCity))
ggplot(dd[dd$N >2], aes(firstCity, N)) +geom_bar(stat="identity")
ggplot(dd[dd$N >2,], aes(firstCity, N)) +geom_bar(stat="identity")
dd <- ddply(all, .(Company), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity")
summary(as.Date("2015-12-17") - all$date)
as.Date("2015-12-17") - all$date
all$diff <- as.Date("2015-12-17") - all$date
summary(as.numeric(all$date))
all$diff
as.numeric(all$date)
summary(as.numeric(all$diff))
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 1 hour at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(60*60)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
require(ggmaps)
require(ggmap)
install.packages("ggmap")
require(ggmap)
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 1 hour at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(60*60)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
getGeoDetails("Frankfurt")
geocode("Frankfurt", output = "latlon" , source = "google")
dd <- ddply(all, .(Company), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity")
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + opts(axis.text.x=theme_text(angle=-90))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dd[dd$N >3,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
dd <- ddply(all, .(firstCity), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(firstCity, N)) +geom_bar(stat="identity")
cities <- ddply(all, .(firstCity), summarise, N=length(firstCity))
cities$long <- NA
cities$lat <- NA
geo <- geocode("Frankfurt", output = "latlon" , source = "google")
cities[1,]$firstCity
geo <- geocode(cities[1,]$firstCity, output = "latlon" , source = "google")
cities$long <- NA
cities$lat <- NA
for(i in 1:nrow(cities)){
geo <- geocode(cities[i,]$firstCity, output = "latlon" , source = "google")
cities$lon <- geo$lon
cities$lat <- geo$lat
}
myMap <- get_map('Germany', zoom = 7, maptype = 'satellite')
ggmap(myMap)
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred")
View(cities)
myMap <- get_map('Germany', zoom = 7, source = "stamen", maptype = "toner")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred")
myMap <- get_map('Germany', zoom = 6, source = "stamen", maptype = "toner")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred")
cities
cities$long <- NA
cities$lat <- NA
for(i in 1:nrow(cities)){
geo <- geocode(cities[i,]$firstCity, output = "latlon" , source = "google")
cities[i,]$lon <- geo$lon
cities[i,]$lat <- geo$lat
}
cities
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred") + xlab("")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, alpha = .5, color="darkred") + xlab("") + ylab("")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities, size=4, alpha = .5, color="darkred") + xlab("") + ylab("")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=2*N), data = cities,  alpha = .5, color="darkred") + xlab("") + ylab("")
saveRDS(cities, "cities.rds")
View(all)
all$scrapedate <- as.Date("2015-12-17")
saveRDS(all, "jobMarketData.rds")
ddply(all, .(date), summarise, N=length(firstCity))
dd <- ddply(all, .(date), summarise, N=length(firstCity))
ggplot(dd, aes(date, N))+ geom_line()
ggplot(dd, aes(date, N))+ geom_line() + xlab("")
ggplot(all, aes(firstCity)) +geom_histogram()
ggplot(all, aes(weekday)) +geom_histogram()
ggplot(all, aes(Company)) +geom_histogram()
ggplot(dd, aes(date, N))+ geom_line() + xlab("") + ylab("Number of open Positions") + theme_economist()
dd <- ddply(all, .(Company), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
dd <- ddply(all, .(Company), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ddply(all, .(Company, firstCity), summarise, N=length(firstCity))
ddply(all, .(Company, firstCity, Platform), summarise, N=length(firstCity))
ddply(all, .(date,Company, firstCity, Platform), summarise, N=length(firstCity))
dd <- ddply(all, .(date,Company, firstCity, Platform), summarise, N=length(firstCity))
unique(dd[, c("date", "Company", firstCity)])
unique(dd[, c("date", "Company", "firstCity")])
unique(dd[, c("date", "Company", "firstCity", "N")])
open <- unique(dd[, c("date", "Company", "firstCity", "N")])
sum(open$N)
ddply(all,. (Platform), summarise, N=length(firstCity))
ddply(all,. (Platform), summarise, N=length(Company))
open <- unique(dd[, c("Company", "firstCity", "N")])
sum(open$N)
ddply(all,. (Platform), summarise, N=length(Company))
dd <- ddply(all, .(Company), summarise, N=length(firstCity))
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_economist()
ggplot(dd[dd$N >2,], aes(Company, N)) +geom_bar(stat="identity")+ theme_economist() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
length(unique(all$Company))
open <- unique(dd[, c("date", "Company", "firstCity", "N")])
sum(open$N)
URLencode("data scientist")
term = "data scientist"
term <- URLencode(term)
url <- paste0("http://jobsuche.monster.de/jobs/?q=%22", term ,"%22&sort=rv.di.dt")
mov <- html(url)
numPositions <- mov %>% html_nodes("#resultsCountHeader .fnt12") %>% html_text()
numPositions
str_split_fixed(trim(numPositions), " ",2)[,1]
str_split_fixed(str_trim(numPositions), " ",2)[,1]
getMonsterPositions <- function(term){
term <- URLencode(term)
url <- paste0("http://jobsuche.monster.de/jobs/?q=%22", term ,"%22&sort=rv.di.dt")
mov <- html(url)
numPositions <- mov %>% html_nodes("#resultsCountHeader .fnt12") %>% html_text()
numPositions <- str_split_fixed(str_trim(numPositions), " ",2)[,1]
return(numPositions)
}
terms <- ("data scientist", "data analyst", "trader", "SAP ERP", "SEO", "machine learning" )
terms <- ("data scientist", "data analyst", "trader", "SAP ERP", "SEO", "machine learning" )
terms <- c("data scientist", "data analyst", "trader", "SAP ERP", "SEO", "machine learning" )
o <- llply(terms, getMonsterPositions)
o
unlist(o)
cbind(terms, unlist(o))
jobs <- data.frame(cbind(terms, unlist(o)))
View(jobs)
jobs$V2 <- as.numeric(jobs$V2)
ggplot(jobs, aes(terms, V2)) + geom_bar(stat="identity")
ggplot(jobs, aes(terms, V2)) + geom_bar(stat="identity") + xlab("Search Terms") + ylab("open positions") + theme_economist()
write.csv2(jobs,"jobs.csv")
ggplot(jobs, aes(terms, V2)) + geom_bar(stat="identity") + xlab("Search Terms") + ylab("open positions") + theme_economist() +ggtitle("Number of open job postions per search term on Monster ")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities,  alpha = .5, color="darkred") + xlab("") + ylab("")
terms <- c("excel", "SAS", "SPSS", "python", "java",  "SQL", "Tableau", "R")
o <- llply(terms, getMonsterPositions)
skills <- data.frame(cbind(terms, unlist(o)))
skills$V2 <- as.numeric(skills$V2)
skills
term="java"
term <- URLencode(term)
url <- paste0("http://de.indeed.com/Jobs?q=", term)
numPositions <- mov %>% html_nodes("#searchCount") %>% html_text()
numPositions
mov <- html(url)
numPositions <- mov %>% html_nodes("#searchCount") %>% html_text()
numPositions
numPositions <- str_split_fixed(str_trim(numPositions), "von ",2)[,2]
numPositions
numPositions <- str_replace_all(numPositions, ".", "")
numPositions
numPositions <- mov %>% html_nodes("#searchCount") %>% html_text()
numPositions <- str_split_fixed(str_trim(numPositions), "von ",2)[,2]
numPositions <- str_replace_all(numPositions, "\\.", "")
numPositions
getIndeedPositions <- function(term){
term <- URLencode(term)
url <- paste0("http://de.indeed.com/Jobs?q=", term)
mov <- html(url)
numPositions <- mov %>% html_nodes("#searchCount") %>% html_text()
numPositions <- str_split_fixed(str_trim(numPositions), "von ",2)[,2]
numPositions <- str_replace_all(numPositions, "\\.", "")
return(numPositions)
}
getStepstonePositions <- function(term){
term <- URLencode(term)
url <- paste0("http://www.stepstone.de/5/ergebnisliste.html?stf=freeText&ke=", term)
mov <- html(url)
numPositions <- mov %>% html_nodes("#numberResults") %>% html_text()
return(numPositions)
}
getAllPositions <- function(terms){
o <- llply(terms, getMonsterPositions)
jobs <- data.frame(cbind(terms, unlist(o)))
o <- llply(terms, getIndeedPositions)
jobs <- cbind(jobs, unlist(o))
o <- llply(terms, getStepstonePositions)
jobs <- cbind(jobs, unlist(o))
colnames(jobs) <- c("Term", "Monster", "Indeed", "Stepstone")
return(jobs)
}
terms <- c("excel", "SAS", "SPSS", "python", "java",  "SQL", "Tableau", "R")
out <- getAllPositions(terms)
out
write.csv2(out, "topSkills.csv")
View(cities)
myMap <- get_map('Germany', zoom = 6, source = "stamen", maptype = "toner")
ggmap(myMap)+ geom_point(aes(x = lon, y = lat, size=N), data = cities,  alpha = .5, color="darkred") + xlab("") + ylab("")
myMap <- get_map('Germany', zoom = 6, source = "stamen", maptype = "toner")
print(paste("Number of listed job positions:", sum(open$N))
print(paste("Number of listed job positions:", sum(open$N)))
print(paste("Number of listed job positions:", sum(open$N)))
terms <- c("SAS", "SPSS", "Stata", "Python", "Matlab", "Java",  "Scala",  "D3.js")
#### method
method <-c("regression", "neuronale netze", "WebScraping", "API", "TextMining" )
## coding environment
enivron <- c("Scrum",  "git", "JIRA" , "eclipse")
BigD <- c("Spark", "Hadoop", "Mahout", "Hive", "Pig", "MapReduce")
## BI
bi <- c("Excel", "Qlik", "SQL", "Tableau")
### buzzwords
buzzwords <- c("Cloud","Data Mining", "Predictive Analytics",  "Machine Learning")
t2 <- c(terms, method, enivron, BigD, bi, buzzwords)
out2 <- getAllPositions(t2)
write.csv2(out2, "moreSkills.csv")
out2
View(out2)
out2$Category <- ifelse(out2$Term %in% buzzwords, "Buzzwords", "Language" )
out2$Category <- ifelse(out2$Term %in% bi, "Business Intelligence", out2$Category )
out2$Category <- ifelse(out2$Term %in% bi, "Business Intelligence", out2$Category )
out2$Category <- ifelse(out2$Term %in% bigD, "Technology", out2$Category )
out2$Category <- ifelse(out2$Term %in% method, "Method", out2$Category )
out2$Category <- ifelse(out2$Term %in% enivron, "Environment", out2$Category )
out2$Category <- ifelse(out2$Term %in% BigD, "Technology", out2$Category )
out2$Category
write.csv2(out2, "moreSkills.csv")
View(out2)
View(out2)
ggplot(out2, aes(Term, Stepstone)) + facet_wrap(~Category) + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
ggplot(out2, aes(Term, Stepstone))  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
ggplot(out2, aes(Term, Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
out$Stepstone <- as.numeric(out$Stepstone)
ggplot(out2, aes(Term, Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
out2$Stepstone <- as.numeric(out2$Stepstone)
ggplot(out2, aes(Term, Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
ggplot(out2[order(out2$Stepstone),], aes(Term, Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
ggplot(out2, aes(reorder(Term, -Stepstone), Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms")
ggplot(out2, aes(reorder(Term, -Stepstone), Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms") +theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(out2, aes(reorder(Term, -Stepstone), Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms") +theme(axis.text.x = element_text(angle = 45, hjust = 1)) +facet_grid(~Category)
ggplot(out2, aes(reorder(Term, -Stepstone), Stepstone)) +geom_bar(stat="identity")  + theme_economist() +ylab("N")+ geom_bar(stat="identity") + xlab("Search Terms") +theme(axis.text.x = element_text(angle = 45, hjust = 1))
paste(terms, "%20")
getAllPositions <- function(terms){
terms <- paste0("%22", terms, "%22")
o <- llply(terms, getMonsterPositions)
jobs <- data.frame(cbind(terms, unlist(o)))
o <- llply(terms, getIndeedPositions)
jobs <- cbind(jobs, unlist(o))
o <- llply(terms, getStepstonePositions)
jobs <- cbind(jobs, unlist(o))
colnames(jobs) <- c("Term", "Monster", "Indeed", "Stepstone")
return(jobs)
}
terms <- paste0("%22", terms, "%22")
terms
term="%22SAS%22"
term <- URLencode(term)
term
terms <- c("data scientist", "data analyst", "trader", "SAP ERP", "SEO", "machine learning" )
(terms)
terms <- URLencode(terms)
terms
terms <- c("data scientist", "data analyst", "trader", "SAP ERP", "SEO", "machine learning" )
terms <- URLencode(terms)
terms
getMonsterPositions <- function(term){
term <- URLencode(term)
url <- paste0("http://jobsuche.monster.de/jobs/?q=%22", term ,"%22&sort=rv.di.dt")
mov <- html(url)
numPositions <- mov %>% html_nodes("#resultsCountHeader .fnt12") %>% html_text()
numPositions <- str_split_fixed(str_trim(numPositions), " ",2)[,1]
numPositions <- str_replace_all(numPositions, "+", "")
return(numPositions)
}
getIndeedPositions <- function(term){
term <- URLencode(term)
term <- paste0("%22", term, "%22")
url <- paste0("http://de.indeed.com/Jobs?q=", term)
mov <- html(url)
numPositions <- mov %>% html_nodes("#searchCount") %>% html_text()
numPositions <- str_split_fixed(str_trim(numPositions), "von ",2)[,2]
numPositions <- str_replace_all(numPositions, "\\.", "")
return(numPositions)
}
getStepstonePositions <- function(term){
term <- URLencode(term)
term <- paste0("%22", term, "%22")
url <- paste0("http://www.stepstone.de/5/ergebnisliste.html?stf=freeText&ke=", term)
mov <- html(url)
numPositions <- mov %>% html_nodes("#numberResults") %>% html_text()
return(numPositions)
}
getAllPositions <- function(terms){
o <- llply(terms, getMonsterPositions)
jobs <- data.frame(cbind(terms, unlist(o)))
o <- llply(terms, getIndeedPositions)
jobs <- cbind(jobs, unlist(o))
o <- llply(terms, getStepstonePositions)
jobs <- cbind(jobs, unlist(o))
colnames(jobs) <- c("Term", "Monster", "Indeed", "Stepstone")
return(jobs)
}
